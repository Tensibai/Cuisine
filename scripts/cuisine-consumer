#!/usr/bin/env ruby

require "rubygems"
require "optparse"
require "ostruct"
require "yaml"
require "stomp"
require "json"
require "base64"
require "time"

options = OpenStruct.new
# set defaults
options.debug = false
options.configfile = "./cuisine.yml"
options.es = true
options.pg = true
options.acknowledge = true
options.foreground = false
options.pidfile = "/var/run/cuisine_consumer.pid"

opts = OptionParser.new do |opts|
  opts.banner = "Usage: dataconsumer [options]"
  opts.on("-d", "--[no-]debug", "Run with debug [default : false]") do |d|
    options.debug = d
  end

  opts.on("-c", "--config FILE", "Configuration file path [default : ./cuisine.yml]") do |c|
    options.configfile = c
  end

  opts.on("-e", "--[no-]es", "Index data to ElasticSearch [default : true]") do |e|
    options.es = e
  end

  opts.on("-p", "--[no-]pg", "Store data into PostgreSQL [default : true]") do |p|
    options.pg = p
  end

  opts.on("-a", "--[no-]acknowledge", "Acknowledge data as it comes, removing it from message queue [default : true]") do |a|
    options.acknowledge = a
  end

  opts.on("-f", "--[no-]foreground", "Runs foreground (or goes background) [default : false]") do |f|
    options.foreground = f
  end

  opts.on("-P", "--pidfile FILE", "PID file path [default : /var/run/cuisine_consumer.pid]") do |pid|
    options.pidfile = pid
  end
end

opts.parse!(ARGV)

if options.foreground == false then
  require "daemons"
  Daemons.daemonize
  File.open(options.pidfile,"w") { |f| f.write(Process.pid) }
  $0="cuisine data consumer"
end

begin
  config = YAML::load_file(options.configfile)
rescue Exception => e
  puts "could not load configuration : dying. #{e}"
  exit 1
end

# Set up stomp connection
cnx=Stomp::Client.new(config["stomp_user"], config["stomp_password"], config["stomp_host"], config["stomp_port"], true)

# Set up Tire
if options.es == true then
  require "tire"
  Tire::Configuration.url(config["es_url"])
end

# Set up PG
if options.pg == true then
  require "pg"
  conn = PG.connect(:host => config["pg_host"], :dbname => config["pg_db"], :port => config["pg_port"], :user => config["pg_user"], :password => config["pg_password"])
  conn.prepare("insert_run", "INSERT INTO chefruns (nodename, elapsed_time, start_time, end_time, updated_resources, environment, diffs) VALUES ($1, $2, $3, $4, $5, $6, $7); ")
end

# the main stuff
cnx.subscribe(config["stomp_queue"], { :ack => :client }) do |data|
  infos = Marshal.load(Base64.decode64(data.body))

  puts infos.inspect if options.debug

  # PG ?
  if options.pg == true then
    conn.exec_prepared("insert_run",[ infos[:nodename], infos[:elapsed_time], infos[:start_time].strftime("%Y/%m/%d %H:%M:%S"), infos[:end_time].strftime("%Y/%m/%d %H:%M:%S"), infos[:updated_resources].to_json, infos[:environment], infos[:diffs].to_json ] )
  end

  # ES ?
  if options.es == true then
    Tire.index "#{config["es_index"]}-#{Time.now.strftime("%Y%m%d")}" do
      store :nodename => infos[:nodename],
            :elapsed_time => infos[:elapsed_time],
            :start_time => infos[:start_time].strftime("%Y/%m/%d %H:%M:%S"),
            :end_time => infos[:end_time].strftime("%Y/%m/%d %H:%M:%S"),
            :resources_total => infos[:resources_total],
            :updated_resources_total => infos[:updated_resources_total],
            :updated_resources_count => infos[:updated_resources_count],
            :updated_resources => infos[:updated_resources].to_a,
            :environment => infos[:environment],
            :diffs => infos[:diffs].to_a,
            :cookbook_count => infos[:cookbook_count],
            :cookbooks => infos[:cookbooks]

      refresh
    end
  end

  # Ack ?
  if options.acknowledge == true then
    cnx.acknowledge data
  end

end

cnx.join
cnx.close
